#!/bin/sh

. /etc/reimu.conf
. /libexec/gpio-funcs

if [ "$TINYSPI" = "yes" ]
then
    modprobe tinyspi # Just in case module is not loaded
    sysfsdir="/sys/kernel/tinyspi"
fi

checkalert_gpio()
{
    alertgpio="`gpio2num $3`"
    gpiostate="`gpioread $alertgpio`"
    gpiounexport $alertgpio
    [ $gpiostate -ne 0 ] && echo -e "$4 $1" || echo -e "$4 $2"
}

ON="is \e[32;1mON\e[0m"
OFF="is \e[33;1OFF\e[0m"
ONL="is \e[32;1mONLINE\e[0m"
OFFL="is \e[33;1OFFLINE\e[0m"
INACT="is inactive"
ACT="is \e[31;1mACTIVE\e[0m"
NRST="is \e[32;1mONLINE\e[0m"
RST="is \e[33;1munder reset\e[0m"
NDET="not detected"
DET="\e[31;1mDETECTED\e[0m"

checkalerts_gpio()
{
    checkalert_gpio "$ON"    "$OFF"  $GPIO_POWER_IN    "System power      "
    checkalert_gpio "$NRST"  "$RST"  $GPIO_RESET_IN    "System            "
    checkalert_gpio "$INACT" "$ACT"  $GPIO_ALERT_CPU   "Alert 1 for CPU   "
    checkalert_gpio "$INACT" "$ACT"  $GPIO_ALERT_CPU2  "Alert 2 for CPU   "
    checkalert_gpio "$INACT" "$ACT"  $GPIO_ALERT_MEM   "Alert for DIMM    "
    checkalert_gpio "$INACT" "$ACT"  $GPIO_ALERT_PCIE  "Alert for PCIe    "
    checkalert_gpio "$INACT" "$ACT"  $GPIO_ALERT_FRU   "Alert for FRU bus "
    checkalert_gpio "$INACT" "$ACT"  $GPIO_ALERT_SMBUS "Alert for SMBus   "
    checkalert_gpio "$INACT" "$ACT"  $GPIO_TCRIT_SMBUS "SMBus overheat    "
    checkalert_gpio "$DET"   "$NDET" $GPIO_INTRUSION   "Chassis intrusion "
    exit 0
}

checkalert_tspi()
{
    [ $(($3 & $4)) -ne 0 ] && echo -e "$5 $1" || echo -e "$5 $2"
}

checkalerts_tspi()
{
    alerts=0x`cat $sysfsdir/state_reg`
    checkalert_tspi "$ONL"   "$OFFL" $alerts 0x00200000 "System    "
    checkalert_tspi "$INACT" "$ACT"  $alerts 0x00000040 "I2C0_ALERT"
    checkalert_tspi "$INACT" "$ACT"  $alerts 0x00000080 "I2C0_TCRIT"
    checkalert_tspi "$INACT" "$ACT"  $alerts 0x00000100 "I2C1_ALERT"
    checkalert_tspi "$INACT" "$ACT"  $alerts 0x00000200 "I2C1_TCRIT"
    checkalert_tspi "$INACT" "$ACT"  $alerts 0x00000400 "I2C0_FAULT"
    checkalert_tspi "$INACT" "$ACT"  $alerts 0x00000800 "I2C2_ALERT"
    checkalert_tspi "$INACT" "$ACT"  $alerts 0x00001000 "I2C3_ALERT"
    checkalert_tspi "$INACT" "$ACT"  $alerts 0x00002000 "I2C3_TCRIT"
    checkalert_tspi "$INACT" "$ACT"  $alerts 0x00004000 "CPUS_ALERT"
    checkalert_tspi "$INACT" "$ACT"  $alerts 0x00008000 "CPUS_TTRIP"
    checkalert_tspi "$DET"   "$NDET" $alerts 0x00000010 "INTRUSION "
    exit 0
}

usage()
{
[ "$@" ] && echo $@
cat << EOF
    Thermal and LED management utility for MUS-A, version 0.1.
    Usage:
        $0 checkalerts       - to list all ALERT, TCRIT, and FAULT conditions.
        $0 <ledname> <mode>  - to turn specific LED on or off.

    <ledname> can be overheat, fanfail, pwrfail, ohfanfail,
                     sysfail1, sysfail2, or alarm.
    <mode> can be on or off.
EOF
exit 0
}

case "$1" in
    "overheat")
        lednames="overheat"
        ledbits=0x00000040 # Equals to ohfanfail on TinySPI boards
        ;;
    "fanfail")
        lednames="fanfail"
        ledbits=0x00000040 # Equals to ohfanfail on TinySPI boards
        ;;
    "alarm")
        lednames="alarm"
        ledbits=0x00000100 # Equals to sysfail1 on TinySPI boards
        ;;
    "ohfanfail")
        lednames="ohfanfail ohfanfail2"
        ledbits=0x00000040
        ;;
    "pwrfail")
        lednames="pwrfail"
        ledbits=0x00000080
        ;;
    "sysfail1")
        lednames="sysfail1"
        ledbits=0x00000100
        ;;
    "sysfail2")
        lednames="sysfail2"
        ledbits=0x00000200
        ;;
    "checkalerts")
        if [ "$TINYSPI" = "yes" ]
        then
            checkalerts_tspi
        else
            checkalerts_gpio
        fi
        ;;
    ""|"-h"|"--help")
        usage
        ;;
    *)
        usage "You should specify either 'checkalerts' operation or LED name and mode."
        ;;
esac

case "$2" in
    "on")
        trigger="default-on"
        tspireg=command_bits_reset
        ;;
    "off")
        trigger="none"
        tspireg=command_bits_set
        ;;
    *)
        usage "LED mode should be 'on' or 'off'."
        ;;
esac

if [ "$TINYSPI" = "no" ]
then
    for ledname in $lednames
    do
        echo $trigger > "/sys/class/leds/platform:red:$ledname/trigger"
    done
else
    echo $ledbits > $sysfsdir/$tspireg
fi
