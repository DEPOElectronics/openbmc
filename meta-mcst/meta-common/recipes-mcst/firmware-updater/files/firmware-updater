#!/bin/bash

error()
{
    echo $@ 1>&2
    exit 1
}

intro()
{
    echo "===== Downloading firmware from $@... ====="
}

usage()
{
    cat << EOF
    Usage: $1 [options] <URL>

    Here, <URL> should specify location of firmware file to flash MTD device.
    Supported protocols: scp, http, https, ftp, file.
    \`file' protocol is used for files already uploaded to BMC filesystem,
    other protocols are used to automatically download files from network.

    Options:
        --fullclear: Remove all data from user partition while flashing BMC.
                     Has no effect when flashing other MTD devices.

    Examples:
        $1 http://fileserver.domain/uploads/new_bmc_fimware.bin
        $1 scp://admin@fileserver.domain:/var/www/uploads/new_bmc_fimware.bin
        $1 file:///tmp/new_bmc_fimware.bin

    Note: flashing won't clear user data in /mnt/data partition;
          you better wipe it by yourself if needed.

    Note: you may use WGET_PARAMS environment variable to pass some parameters
          to wget (http, https, ftp protocols), like --no-check-certificate.
EOF
}

DEST="/tmp/firmware"

FULLCLEAR="no"
if [ "$1" == "--fullclear" ]
then
    FULLCLEAR="yes"
    shift
fi

PROTO="`echo $1 | cut -d: -f1`"
case "$PROTO" in
    "http"|"https"|"ftp")
        intro $1
        SRC="$1"
        echo "    Source URL: $SRC"
        echo "    Destination file: $DEST"
        echo "    Protocol: $PROTO"
        wget $WGET_PARAMS $SRC -O $DEST || error "Calling wget failed, aborting."
        ;;
    "scp")
        echo $1 | grep -qv "^scp://" && error "Malformed scp URL, use scp://[user@]host:/path/to/file."
        intro $1
        SRC="`echo $1 | sed 's#^scp://##'`"
        echo "    Source host and path: $SRC"
        echo "    Destination file: $DEST"
        scp $SRC $DEST || error "Calling scp failed, aborting."
        ;;
    "file")
        echo $1 | grep -qv "^file:///" && error "Malformed file URL, use file:///path/to/file."
        DEST="`echo $1 | sed 's#^file://##'`"
        ;;
    "-h"|"--help")
        usage $0
        exit 0
        ;;
    *)
        error "Incorrect parameters. Run \`$0 -h' or \`$0 --help' to find out how to use this tool."
        ;;
esac

# In case you're flashing device other than BMC flash, you should specify two variables:
#    MTDDEV    (required) - device to flash inside /dev (such as mtdblock6)
#    FLASHSIZE (optional) - size of region which is allowed to flash from chip start
#                           (in bytes, but should be less than flash size, and should divide by $BLOCKSIZE)

# Determine FLASHSIZE: number of bytes to write into chip.
MTDDEV=${MTDDEV:-mtdblock0}
MTDFLASH=/dev/$MTDDEV
DEVSIZE=`cat /sys/block/$MTDDEV/device/size`
if [ -z "$FLASHSIZE" ]
then
    [ "$DEVSIZE" = "67108864" ] && FLASHSIZE=58720256 # Flash only first 56 MB; last 8 MB is user data partition.
    [ "$DEVSIZE" = "33554432" ] && FLASHSIZE=29360128 # Flash only first 28 MB; last 4 MB is user data partition.
    if [ -z $FLASHSIZE ]
    then
        echo "Warning: Flash has wrong size $DEVSIZE bytes, will write the whole chip." 1>&2
        FLASHSIZE=$DEVSIZE
    fi
fi

# Check if FLASHSIZE is correct.
BLOCKSIZE=512
[ `expr $FLASHSIZE % $BLOCKSIZE` -ne 0 ] && error "Desired flash size ($FLASHSIZE) should divide by block size $BLOCKSIZE."

if [ "$MTDDEV" = "mtdblock0" ]
then
    systemctl status rescue.target > /dev/null || error "BMC flash should be reprogrammed from single-user mode only. Execute 'init 1' to get into it."
    echo "Note: programming BMC flash chip. It will end up in immediate reboot."
    cp /usr/bin/md5sum /sbin/reboot /usr/bin/pv /bin/dd /bin/sync /tmp
    export PATH=/tmp:$PATH
    mount / -o remount,ro
    REBOOT=yes
fi

# Locate file and determine FILESIZE: number of bytes to read from file.
[ ! -f $DEST ] && error "Can't find file $DEST, aborting."
FILESIZE=`stat -c%s $DEST`
[ -z "$FILESIZE" ] && error "Can't stat() file $DEST, aborting."
[ $FILESIZE -eq 0 ] && error "File $DEST is empty, aborting."
if [ $FILESIZE -gt $FLASHSIZE ]
then
    echo "Warning: File $DEST ($FILESIZE bytes) is greater than allowed flash size ($FLASHSIZE bytes), will write the only part that fits." 1>&2
    # Note: Flashsize is already divides by BLOCKSIZE, so no alignment will be needed.
    FILESIZE=$FLASHSIZE
fi

echo "===== Flashing $DEST into $MTDFLASH... ====="

# Align firmware to block size, if needed
if [ `expr $FILESIZE % $BLOCKSIZE` -ne 0 ]
then
    NEWSIZE=`expr \( \( $FILESIZE / $BLOCKSIZE \) + 1 \) \* 512`
    echo "Expanding $DEST to fit block size of $BLOCKSIZE ($FILESIZE -> $NEWSIZE bytes)..."
    FILESIZE=$NEWSIZE
    truncate -s $FILESIZE $DEST
fi

# Program the flash chip
BLOCKS=`expr $FILESIZE / $BLOCKSIZE`
echo "Programming flash $MTDFLASH:"
dd if=$DEST bs=$BLOCKSIZE count=$BLOCKS 2>/dev/null | pv -s $FILESIZE | dd of=$MTDFLASH bs=$BLOCKSIZE 2>/dev/null
echo "Total $BLOCKS blocks of $BLOCKSIZE bytes written."

# Check results
echo "Calculating checksum of source file..."
CSUM_S=`dd if=$DEST bs=$BLOCKSIZE count=$BLOCKS 2>/dev/null | pv -s $FILESIZE | md5sum | cut -d" " -f1`
echo "Calculating checksum of corresponding flash region..."
CSUM_D=`dd if=$MTDFLASH bs=$BLOCKSIZE count=$BLOCKS 2>/dev/null | pv -s $FILESIZE | md5sum | cut -d" " -f1`
echo "File MD5: $CSUM_S, flash MD5: $CSUM_D"
[ "$CSUM_S" != "$CSUM_D" ] && error "ERROR! Checksums do not match. Possibly you have a broken flash, or maybe you could just try again and hope it will be OK then."
echo "Checksums match, flashing is considered successful."

# Remove unneeded file (if we did upload it, not user)
if [ $PROTO != "file" ]
then
    echo "Removing $DEST (it's not needed anymore)."
    # Note: in this case, we have file on /tmp, so even if we are programming BMC flash
    # and therefore rootfs is invalid at this moment, we still can remove this file.
    rm $DEST
fi

echo "===== Flashing is successful! ====="
if [ "$REBOOT" ]
then
    if [ "$FULLCLEAR" = "yes" ]
    then
        echo "    Clearing RW data partition..."
        rm -rf /run/initramfs/rw/cow/*
    fi
    echo "    Rebooting BMC."
    sync
    reboot -f
fi
