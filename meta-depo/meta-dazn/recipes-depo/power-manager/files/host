#!/bin/bash
POWERstate=GPIO_POWER_IN
RESETstate=GPIO_RESET_IN
POWERBTN=GPIO_PWR_BTN
RESETBTN=GPIO_RST_BTN

setstate() {
  dbusstate=$(busctl get-property xyz.openbmc_project.State.Host /xyz/openbmc_project/state/host0 xyz.openbmc_project.State.Host CurrentHostState | awk '{print $2}') 
  OFF="\"xyz.openbmc_project.State.Host.HostState.Off\""
  ON="\"xyz.openbmc_project.State.Host.HostState.Running\""
  if [ "$(power_state)" == "on" ]; then
     if [ "$dbusstate" != "$ON" ]; then
        busctl set-property xyz.openbmc_project.State.Host /xyz/openbmc_project/state/host0 xyz.openbmc_project.State.Host CurrentHostState s "xyz.openbmc_project.State.Host.HostState.Running"
        busctl set-property xyz.openbmc_project.Watchdog /xyz/openbmc_project/watchdog/host0 xyz.openbmc_project.State.Watchdog ExpireAction s xyz.openbmc_project.State.Watchdog.Action.None
     fi
  else
     if [ $dbusstate != "$OFF" ]; then
        busctl set-property xyz.openbmc_project.State.Host /xyz/openbmc_project/state/host0 xyz.openbmc_project.State.Host CurrentHostState s "xyz.openbmc_project.State.Host.HostState.Off"
     fi
  fi 
}

power_reset() {
	echo "Host reset"
	#busctl set-property xyz.openbmc_project.Watchdog /xyz/openbmc_project/watchdog/host0 xyz.openbmc_project.State.Watchdog ExpireAction s xyz.openbmc_project.State.Watchdog.Action.None
	btn=$(gpiofind $RESETBTN)
	gpioset $btn=0
	sleep 0.2
	gpioset $btn=1
        busctl set-property xyz.openbmc_project.State.Host /xyz/openbmc_project/state/host0 xyz.openbmc_project.State.Host CurrentHostState s "xyz.openbmc_project.State.Host.HostState.Off"
        setstate
}

power_off() {
	echo "Host power off"
        #busctl set-property xyz.openbmc_project.Watchdog /xyz/openbmc_project/watchdog/host0 xyz.openbmc_project.State.Watchdog ExpireAction s xyz.openbmc_project.State.Watchdog.Action.None
        #busctl set-property xyz.openbmc_project.State.Chassis /xyz/openbmc_project/state/chassis0 xyz.openbmc_project.State.Chassis RequestedPowerTransition s xyz.openbmc_project.State.Chassis.Transition.Off	
	btn=$(gpiofind $POWERBTN)
	gpioset $btn=0
	sleep 0.2
	gpioset $btn=1
}

power_on() {
	echo "Host power on"
	btn=$(gpiofind $POWERBTN)
	gpioset $btn=0
	sleep 0.2
	gpioset $btn=1
}

power_off_hard() {
	echo "Host power off hard"
        power_reset
	btn=$(gpiofind $POWERBTN)
	gpioset $btn=0
	sleep 5
	gpioset $btn=1
}

power_state() {
    st=$(gpioget $(gpiofind $POWERstate))
    if [ "$st" == "1" ]; then
        echo "on"
    else
        echo "off"
    fi
}


if [ "$1" = "on" ]; then
  if [ "$(power_state)" == "off" ]; then
      power_on
  fi
elif [ "$1" = "off" ]; then
  if [ "$(power_state)" == "on" ]; then
     if [ "$2" = "hard" ]; then
      power_off_hard
     else
      power_off 
     fi
  fi
elif [ "$1" == "cycle" ]; then
  if [ "$(power_state)" == "on" ]; then
      power_off_hard
      sleep 1
  else
    echo "WARNING: Powering on server"
  fi
    power_on
elif [ "$1" == "reset" ]; then
  if [ "$(power_state)" == "on" ]; then
      power_reset
  else
    echo "ERROR: Server not powered on"
  fi
elif [ "$1" == "getstate" ]; then
    power_state
elif [ "$1" == "setstate" ]; then
   setstate 
else
    echo "Invalid parameter=$1"
    echo "usage: host [on|off|off hard|getstate|cycle|reset|setstate]";
fi

exit 0;
